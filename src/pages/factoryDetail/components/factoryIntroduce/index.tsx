import React, { useState, useEffect } from 'react'
import { Tabs, Table } from 'antd'
import classNames from 'classnames'
import { find, isNil, isArray } from 'lodash'
import { useStores, observer } from '@/utils/mobx'
import { toJS } from 'mobx'
import SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Autoplay } from 'swiper'

import Swiper from 'swiper'
import axios from '@/utils/axios'
import 'swiper/swiper-bundle.min.css'
import styles from './index.module.less'
import './style.less'

SwiperCore.use([Navigation, Pagination, Scrollbar, A11y, Autoplay])

const { TabPane } = Tabs

const tabList = [
  { value: '‰ºÅ‰∏öÁÆÄ‰ªã', key: 'introduction' },
  { value: 'Áîü‰∫ßËÉΩÂäõ', key: 'ability' },
  { value: 'Âêà‰ΩúÊù°‰ª∂', key: 'condition' },
  { value: 'ËΩ¶Èó¥ËÆæÂ§á', key: 'equipment' },
  { value: 'ËµÑË¥®ËØÅ‰π¶', key: 'certificate' }
]
const introductionMap = [
  { value: 'yearOutputValue', label: 'Âπ¥‰∫§ÊòìÈ¢ù' },
  { value: 'staffNumber', label: 'ÂëòÂ∑•ÊÄªÊï∞' },
  { value: 'productLineNum', label: 'Áîü‰∫ßÊµÅÊ∞¥Á∫ø' },
  { value: 'factoryArea', label: 'ÂéÇÊàøÈù¢ÁßØ' },
  { value: 'supportDesign', label: 'ÊîØÊåÅÊâìÊ†∑' },
  { value: 'totalLocation', label: 'Âä†Â∑•ËÆæÂ§á' },
  { value: 'manufactureBrand', label: '‰ª£Â∑•ÂìÅÁâå' },
  { value: 'factoryBrand', label: 'ÂïÜÊ†á/ÂìÅÁâå' },
  { value: 'factoryCertificateLabels', label: 'ËµÑË¥®ËØÅ‰π¶' }
]

const abilityMap = [
  { value: 'staffNumber', label: 'Áîü‰∫ß‰∫∫Êï∞' },
  { value: 'qcPersonNumber', label: 'Ê£ÄÈ™å‰∫∫Êï∞' },
  { value: 'yearOutputProd', label: 'Âπ¥‰∫ßÂÄº' },
  { value: 'designPersonNumber', label: 'ÊâìÊ†∑‰∫∫ÂëòÊï∞' },
  { value: 'qcGroupType', label: 'Ê£ÄÈ™åÂ∞èÁªÑ' },
  { value: 'materialSupplyTime', label: 'ÂéüÊùêÊñô‰æõÂ∫îÊó∂Èó¥' },
  { value: 'craft', label: 'ÁâπÊÆäÂ∑•Ëâ∫' }
]
const conditionMap = [
  { value: 'customMoq', label: 'ÂÆöÂà∂Ëµ∑ËÆ¢Èáè' },
  { value: 'hasVatInvoice', label: 'Â¢ûÂÄºÁ®éÂèëÁ•®' },
  { value: 'deliveryType', label: '‰∫§Ë¥ßÊñπÂºè' },
  { value: 'factoryInspectType', label: 'È™åÂéÇÊñπÂºè' },
  { value: 'oemMoq', label: 'Ë¥¥ÁâåËµ∑ËÆ¢Èáè' },
  { value: 'invoicePoint', label: 'ÂèëÁ•®ÁÇπÊï∞' },
  { value: 'payType', label: '‰ªòÊ¨æÊñπÂºè' },
  { value: 'shortestDeliveryTime', label: 'ÊúÄÁü≠‰∫§Ë¥ßÊúü' }
]

const TableComponent = props => {
  const { activeKey, current } = props
  const currentMap = activeKey === 'introduction' ? introductionMap : activeKey === 'ability' ? abilityMap : conditionMap
  return (
    <>
      {activeKey === 'introduction' && <div>{current.enterpriseDesc}</div>}
      <div className={styles.introduceInfo}>
        <ul className={classNames(styles.introduceBox, styles.introduceBoxLeft)}>
          {currentMap.map((item, index) => {
            const name = isNil(current[item.value]) ? undefined : item.label
            let newValue
            if (item.value === 'supportDesign' || item.value === 'hasVatInvoice') {
              newValue = current[item.value] ? 'ÊòØ' : 'Âê¶'
            } else if (item.value === 'factoryCertificateLabels') {
              newValue = isArray(current[item.value]) ? current[item.value].join('„ÄÅ') : current[item.value]
            } else {
              newValue = current[item.value]
            }
            return (
              <li key={index}>
                <div className={styles.boxLabel}>{name}</div>
                <div className={styles.boxValue}>{newValue}</div>
              </li>
            )
          })}
        </ul>
        {/* <ul
          className={classNames(styles.introduceBox, styles.introduceBoxRight)}
        >
        </ul> */}
        {/* <ul
          className={classNames(styles.introduceBox, styles.introduceBoxBottom)}
        >
        </ul> */}
      </div>
    </>
  )
}
const WorkshopEquipment = props => {
  const {
    current: { equipment }
  } = props
  const rowKey = 'id'

  const columns = [
    {
      title: 'ËÆæÂ§áÂêç',
      dataIndex: 'name',
      key: 'name'
    },
    {
      title: 'Êï∞Èáè',
      dataIndex: 'number',
      key: 'number'
    },
    {
      title: 'ÂìÅÁâå',
      dataIndex: 'brand',
      key: 'brand'
    },
    {
      title: 'ÂûãÂè∑',
      dataIndex: 'model',
      key: 'model'
    }
  ]
  useEffect(() => {
    new Swiper('.mySwiper', {
      slidesPerView: 3,
      spaceBetween: 20,
      centeredSlides: true,
      centeredSlidesBounds: true,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      loop: true
    })
  }, [])
  return (
    <div>
      <Table rowKey={rowKey} dataSource={equipment} columns={columns} pagination={false} />
      <div className={styles.swiperBox}>
        <div className="swiper-container equipmentSwiper  mySwiper">
          <div className="swiper-wrapper">
            <div className={'swiper-slide'}>
              <img className="swiper-img" src={require('@/static/images/u1495.png')} />
            </div>
            <div className={'swiper-slide'}>
              <img className="swiper-img" src={require('@/static/images/u1496.png')} />
            </div>
            <div className={'swiper-slide'}>
              <img className="swiper-img" src={require('@/static/images/u1497.png')} />
            </div>
            <div className={'swiper-slide'}>
              <img className="swiper-img" src={require('@/static/images/u1497.png')} />
            </div>
          </div>
          <div className="swiper-button-next"></div>
          <div className="swiper-button-prev"></div>
          <div className="swiper-pagination"></div>
        </div>
      </div>
    </div>
  )
}

const QualificationCertificate = props => {
  const {
    current: { certificate = [] }
  } = props
  return (
    <div className={styles.qualificationCertificate}>
      {certificate.map(item => (
        <div key={item.id} className={styles.certificateBox}>
          <img className={styles.certificateImg} src={require('@/static/images/u994.png')} />
          <span>{item.certificationName.label}</span>
        </div>
      ))}
    </div>
  )
}

const FactoryIntroduce = props => {
  const { factoryId } = props
  const { commonStore } = useStores()
  const { dictionary } = commonStore
  const { factoryYearOutputValue = [], factoryYearOutputProd = [], factoryCertificate = [] } = toJS(dictionary)
  console.log('üöÄ ~ file: index.tsx ~ line 186 ~ toJS(dictionary)', toJS(dictionary))

  const [activeTab, setActiveTab] = useState('introduction')
  const [introductions, setIntroductions] = useState<any>({})
  const [ability, setAbility] = useState<any>({})
  const [conditions, setConditions] = useState<any>({})
  const [equipments, setEquipments] = useState<any>([])
  const [certificate, setCertificate] = useState<any>([])
  const [currentObj, setCurrentObj] = useState<any>({})

  const onTabChange = activeKey => {
    const newCurrent = {
      introduction: { ...introductions },
      ability: { ...ability },
      condition: { ...conditions },
      equipment: [...equipments],
      certificate: { ...certificate }
    }
    setActiveTab(activeKey)
    if (activeKey === 'equipment') {
      const equipment = { equipment: [...equipments] }
      setCurrentObj({ ...equipment })
    } else if (activeKey === 'certificate') {
      const newCertificate = { certificate: [...certificate] }
      setCurrentObj({ ...newCertificate })
    } else {
      setCurrentObj({ ...newCurrent[activeKey] })
    }
  }

  // ‰ºÅ‰∏öÁÆÄ‰ªã
  const getIntroduction = async () => {
    const response = await axios.get('/api/factory/enterprise/get-by-factory-id', {
      factoryId
    })
    const { success, data = {} } = response
    if (success) {
      const { yearOutputValue, staffNumber, factoryArea, productLineNum, totalLocation } = data
      const newValue = factoryYearOutputValue.find(item => item.value === yearOutputValue) || {}
      const newNumber = staffNumber.split(',')
      setIntroductions({
        ...data,
        yearOutputValue: newValue.label,
        staffNumber: `${newNumber[0]}‰∫∫ ~ ${newNumber[1]}‰∫∫`,
        factoryArea: `${factoryArea}Âπ≥Á±≥`,
        productLineNum: `${productLineNum}Êù°`,
        totalLocation: `${totalLocation}Âè∞`
      })
      setCurrentObj({
        ...data,
        yearOutputValue: newValue.label,
        staffNumber: `${newNumber[0]}‰∫∫ ~ ${newNumber[1]}‰∫∫`,
        factoryArea: `${factoryArea}Âπ≥Á±≥`,
        productLineNum: `${productLineNum}Êù°`,
        totalLocation: `${totalLocation}Âè∞`
      })
    }
  }
  //Áîü‰∫ßËÉΩÂäõ
  const getAbility = async () => {
    const response = await axios.get('/api/factory/info/get-capacity-factory-id', {
      factoryId
    })
    const { success, data = {} } = response
    if (success) {
      const { staffNumber, qcPersonNumber, yearOutputProd, designPersonNumber, materialSupplyTime } = data
      const newNumber = staffNumber.split(',')
      const newValue = factoryYearOutputProd.find(item => item.value === yearOutputProd) || {}
      setAbility({
        ...data,
        staffNumber: `${newNumber[0]}‰∫∫ ~ ${newNumber[1]}‰∫∫`,
        qcPersonNumber: `${qcPersonNumber}‰∫∫`,
        yearOutputProd: newValue.label,
        designPersonNumber: `${designPersonNumber}‰∫∫`,
        materialSupplyTime: `${materialSupplyTime}Â§©`
      })
    }
  }

  // Âêà‰ΩúÊù°‰ª∂
  const getCooperation = async () => {
    const response = await axios.get('/api/factory/cooperation-condition/get', {
      id: '1398111476140589058'
    })
    const { success, data = {} } = response
    if (success) {
      const { customMoq, oemMoq, invoicePoint, shortestDeliveryTime } = data
      setConditions({
        ...data,
        customMoq: `${customMoq}‰ª∂`,
        oemMoq: `${oemMoq}‰ª∂`,
        invoicePoint: `${invoicePoint}%`,
        shortestDeliveryTime: `${shortestDeliveryTime}Â§©`
      })
    }
  }
  // ËΩ¶Èó¥ËÆæÂ§á
  const getEquipment = async () => {
    const response = await axios.post('/api/factory/equipment/list', {
      factoryId
    })
    const { success, data = {} } = response
    if (success) {
      const { records } = data
      setEquipments([...records])
    }
  }
  // ËµÑË¥®ËØÅ‰π¶
  const getCertificate = async () => {
    const response = await axios.post('/api/factory/factory-certificate/list', {
      factoryId
    })
    const { success, data = {} } = response
    if (success) {
      const { records = [] } = data
      const newData = records.map(item => ({
        ...item,
        certificationName: factoryCertificate.find(o => o.value === item.certificationName) || {}
      }))
      setCertificate([...newData])
    }
  }

  useEffect(() => {
    if (dictionary) {
      getIntroduction()
      getCooperation()
      getAbility()
      getEquipment()
      getCertificate()
    }
  }, [dictionary])
  return (
    <div className={styles.factoryIntroduce}>
      <Tabs activeKey={activeTab} tabBarGutter={20} onChange={onTabChange}>
        {tabList.map(item => (
          <TabPane tab={item.value} key={item.key}>
            <div className={styles.introduceContent}>
              <h2 className={styles.introduceTitle}>{find(tabList, tab => tab.key === activeTab).value}</h2>
              {/* ‰ºÅ‰∏öÁÆÄ‰ªã Áîü‰∫ßËÉΩÂäõ Âêà‰ΩúÊù°‰ª∂ */}
              {(activeTab === 'introduction' || activeTab === 'ability' || activeTab === 'condition') && (
                <TableComponent activeKey={activeTab} current={currentObj} />
              )}
              {/* ËΩ¶Èó¥ËÆæÂ§á */}
              {activeTab === 'equipment' && <WorkshopEquipment current={currentObj} />}
              {/* ËµÑË¥®ËØÅ‰π¶ */}
              {activeTab === 'certificate' && <QualificationCertificate current={currentObj} />}
            </div>
          </TabPane>
        ))}
      </Tabs>
    </div>
  )
}

export default observer(FactoryIntroduce)
